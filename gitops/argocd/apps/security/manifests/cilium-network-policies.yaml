# === CILIUM NETWORK POLICIES ===
# Replace Gatekeeper with Cilium's comprehensive L3/L4/L7 network policies
# These policies provide better performance and deeper integration with the network stack

# === DEFAULT DENY POLICY ===
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: default-deny-all
  namespace: default
spec:
  description: "Default deny all ingress and egress traffic"
  endpointSelector: {}
  egress: []
  ingress: []
---
# === SYSTEM NAMESPACE PROTECTION ===
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: protect-system-namespaces
spec:
  description: "Protect critical system namespaces"
  endpointSelector:
    matchLabels:
      "k8s:io.kubernetes.pod.namespace": "kube-system"
  ingress:
    - fromEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
    - fromEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "monitoring"
      toPorts:
        - ports:
          - port: "9962"  # Cilium metrics
          - port: "9963"  # Cilium operator metrics
          - port: "4245"  # Hubble relay
  egress:
    - {} # Allow all egress for system components
---
# === APPLICATION SECURITY POLICIES ===
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: web-frontend-policy
  namespace: default
spec:
  description: "Policy for web frontend applications"
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: frontend
  ingress:
    # Allow ingress from Cilium ingress controller
    - fromEndpoints:
        - matchLabels:
            "k8s:io.cilium.io/policy": "ingress"
      toPorts:
        - ports:
          - port: "8080"
            protocol: TCP
          rules:
            http:
              - method: "GET"
                path: "/health"
              - method: "GET"
                path: "/api/.*"
              - method: "POST"
                path: "/api/.*"
    # Allow ingress from other frontend services
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/component: frontend
  egress:
    # Allow egress to backend services
    - toEndpoints:
        - matchLabels:
            app.kubernetes.io/component: backend
      toPorts:
        - ports:
          - port: "8080"
            protocol: TCP
    # Allow DNS resolution
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
            k8s-app: kube-dns
      toPorts:
        - ports:
          - port: "53"
            protocol: UDP
          - port: "53"
            protocol: TCP
---
# === DATABASE SECURITY POLICY ===
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: database-policy
  namespace: default
spec:
  description: "Strict policy for database access"
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: database
  ingress:
    # Only allow backend services to access database
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/component: backend
      toPorts:
        - ports:
          - port: "5432"  # PostgreSQL
            protocol: TCP
          - port: "3306"  # MySQL
            protocol: TCP
    # Allow monitoring access
    - fromEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "monitoring"
      toPorts:
        - ports:
          - port: "9187"  # PostgreSQL exporter
            protocol: TCP
          - port: "9104"  # MySQL exporter
            protocol: TCP
  egress:
    # Allow DNS resolution only
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
            k8s-app: kube-dns
      toPorts:
        - ports:
          - port: "53"
            protocol: UDP
---
# === L7 HTTP SECURITY POLICY ===
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: api-security-policy
  namespace: default
spec:
  description: "L7 HTTP security for API services"
  endpointSelector:
    matchLabels:
      app.kubernetes.io/component: api
  ingress:
    - fromEndpoints:
        - matchLabels:
            app.kubernetes.io/component: frontend
      toPorts:
        - ports:
          - port: "8080"
            protocol: TCP
          rules:
            http:
              # Allow specific API endpoints
              - method: "GET"
                path: "/api/v1/users"
              - method: "POST"
                path: "/api/v1/users"
              - method: "GET"
                path: "/api/v1/health"
              - method: "GET"
                path: "/metrics"
              # Block admin endpoints
              - method: "GET"
                path: "/api/v1/admin/.*"
                headers:
                  - "Authorization: Bearer [a-zA-Z0-9]+"
---
# === EGRESS SECURITY POLICIES ===
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: restrict-external-egress
spec:
  description: "Restrict external egress traffic"
  endpointSelector:
    matchExpressions:
      - key: "k8s:io.kubernetes.pod.namespace"
        operator: NotIn
        values: ["kube-system", "cilium-system"]
  egress:
    # Allow DNS resolution
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
            k8s-app: kube-dns
      toPorts:
        - ports:
          - port: "53"
            protocol: UDP
    # Allow HTTPS to external services (e.g., package repos)
    - toFQDNs:
        - matchName: "*.archive.ubuntu.com"
        - matchName: "security.ubuntu.com"
        - matchName: "registry-1.docker.io"
        - matchName: "*.githubusercontent.com"
      toPorts:
        - ports:
          - port: "443"
            protocol: TCP
    # Block all other external traffic
---
# === MONITORING NAMESPACE POLICY ===
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: monitoring-policy
  namespace: monitoring
spec:
  description: "Policy for monitoring namespace"
  endpointSelector: {}
  ingress:
    # Allow access from ingress for Grafana
    - fromEndpoints:
        - matchLabels:
            "k8s:io.cilium.io/policy": "ingress"
      toPorts:
        - ports:
          - port: "3000"  # Grafana
            protocol: TCP
  egress:
    # Allow scraping metrics from all namespaces
    - toEndpoints: []
      toPorts:
        - ports:
          - port: "9090"  # Prometheus
          - port: "9962"  # Cilium agent
          - port: "9963"  # Cilium operator
          - port: "4245"  # Hubble relay
          - port: "2112"  # Tetragon
            protocol: TCP
    # Allow DNS
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
            k8s-app: kube-dns
      toPorts:
        - ports:
          - port: "53"
            protocol: UDP
---
# === TETRAGON ENFORCEMENT POLICIES ===
# These policies work alongside Tetragon for runtime enforcement
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: tetragon-integration
spec:
  description: "Network policies for Tetragon security enforcement"
  endpointSelector:
    matchLabels:
      app.kubernetes.io/name: tetragon
  ingress:
    # Allow metrics collection
    - fromEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "monitoring"
      toPorts:
        - ports:
          - port: "2112"
            protocol: TCP
  egress:
    # Allow Tetragon to communicate with Kubernetes API
    - toEntities:
        - "kube-apiserver"
    # Allow DNS resolution
    - toEndpoints:
        - matchLabels:
            "k8s:io.kubernetes.pod.namespace": "kube-system"
            k8s-app: kube-dns
      toPorts:
        - ports:
          - port: "53"
            protocol: UDP
