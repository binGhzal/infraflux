apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring-stack
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "3"
  labels:
    app.kubernetes.io/name: monitoring-stack
    app.kubernetes.io/component: infrastructure
spec:
  project: platform
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 57.0.0
    helm:
      values: |
        # Global configuration
        global:
          rbac:
            create: true
            pspEnabled: false

        # Prometheus configuration
        prometheus:
          prometheusSpec:
            retention: {{ .Values.monitoring.prometheus.retention | default "30d" }}
            retentionSize: {{ .Values.monitoring.prometheus.storage | default "50Gi" }}
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: longhorn
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: {{ .Values.monitoring.prometheus.storage | default "50Gi" }}

            # Resource configuration
            resources:
              requests:
                cpu: 200m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 2Gi

            # Security context
            securityContext:
              runAsNonRoot: true
              runAsUser: 65534
              fsGroup: 65534

            # Service monitor selector
            serviceMonitorSelectorNilUsesHelmValues: false
            podMonitorSelectorNilUsesHelmValues: false
            ruleSelectorNilUsesHelmValues: false

            # External URL for ingress
            externalUrl: https://prometheus.{{ .Values.environment.domain | default "platform.local" }}

        # Grafana configuration
        grafana:
          enabled: true
          adminPassword: {{ .Values.monitoring.grafana.adminPassword | default "admin" }}

          persistence:
            enabled: true
            storageClassName: longhorn
            size: 10Gi

          # Ingress configuration
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: {{ .Values.certManager.defaultIssuer | default "letsencrypt-staging" }}
              nginx.ingress.kubernetes.io/rewrite-target: /
            hosts:
              - grafana.{{ .Values.environment.domain | default "platform.local" }}
            tls:
              - secretName: grafana-tls
                hosts:
                  - grafana.{{ .Values.environment.domain | default "platform.local" }}

          # Resource configuration
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

          # Default dashboards
          defaultDashboardsEnabled: true
          defaultDashboardsTimezone: UTC

          # Data sources
          additionalDataSources:
            - name: Loki
              type: loki
              url: http://loki:3100
              access: proxy

        # Alertmanager configuration
        alertmanager:
          alertmanagerSpec:
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: longhorn
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 10Gi

            # Resource configuration
            resources:
              requests:
                cpu: 50m
                memory: 128Mi
              limits:
                cpu: 200m
                memory: 256Mi

            # External URL for ingress
            externalUrl: https://alertmanager.{{ .Values.environment.domain | default "platform.local" }}

        # Node exporter configuration
        nodeExporter:
          enabled: true

        # Kube state metrics
        kubeStateMetrics:
          enabled: true

        # Disable components we don't need
        kubeApiServer:
          enabled: true
        kubeControllerManager:
          enabled: false  # Talos doesn't expose this
        kubeScheduler:
          enabled: false  # Talos doesn't expose this
        kubeProxy:
          enabled: false  # Using Cilium
        kubelet:
          enabled: true

        # Service monitors for platform services
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            configReloaders: true
            general: true
            k8s: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubelet: true
            kubeProxy: false  # Using Cilium
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
