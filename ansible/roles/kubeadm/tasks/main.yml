---
# Install Kubernetes prereqs, init control plane on first master, join workers

- name: Install required packages
  become: true
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true

- name: Disable swap
  become: true
  ansible.builtin.shell: |
    sed -ri '/\sswap\s/ s/^#?/#/' /etc/fstab
    swapoff -a || true
  args:
    executable: /bin/bash
  changed_when: false

- name: Configure kernel modules and sysctl for Kubernetes
  become: true
  block:
    - name: Load br_netfilter
      ansible.builtin.shell: |
        modprobe br_netfilter || true
      changed_when: false
    - name: Set sysctl params
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'
    - name: Apply sysctl
      ansible.builtin.shell: sysctl --system
      changed_when: false

- name: Install containerd
  become: true
  block:
    - name: Install containerd.io
      ansible.builtin.apt:
        name: ["containerd"]
        state: present
        update_cache: true
    - name: Generate default config
      ansible.builtin.shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
      args:
        executable: /bin/bash
      changed_when: false
    - name: Use systemd cgroup driver
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true

- name: Add Kubernetes apt key
  become: true
  ansible.builtin.shell: |
    set -e
    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    chmod 0644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    executable: /bin/bash
  changed_when: false

- name: Add Kubernetes apt repo
  become: true
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/kubernetes.list
    content: |
      deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /
    mode: '0644'

- name: Install kubeadm, kubelet, kubectl
  become: true
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true

- name: Hold kube packages
  become: true
  ansible.builtin.shell: apt-mark hold kubelet kubeadm kubectl
  changed_when: false

- name: Enable and start kubelet
  become: true
  ansible.builtin.systemd:
    name: kubelet
    state: started
    enabled: true

- name: Prepare kubeadm config on control plane
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  ansible.builtin.copy:
    dest: /root/kubeadm-config.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: ClusterConfiguration
      kubernetesVersion: v{{ k8s_version }}.0
      clusterName: {{ cluster_name }}
      networking:
        podSubnet: {{ pod_cidr }}
        serviceSubnet: {{ service_cidr }}
      controlPlaneEndpoint: {{ control_plane_endpoint | quote }}
      apiServer:
        extraArgs:
          authorization-mode: Node,RBAC
      scheduler: {}
      controllerManager: {}
    mode: '0600'

- name: Initialize control plane if needed
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  ansible.builtin.shell: |
    set -e
    if [ ! -f /etc/kubernetes/admin.conf ]; then
      kubeadm init --config=/root/kubeadm-config.yaml
      mkdir -p /root/.kube
      cp -f /etc/kubernetes/admin.conf /root/.kube/config
      chown -R root:root /root/.kube
    fi
  args:
    executable: /bin/bash
  register: kubeadm_init
  changed_when: kubeadm_init.rc == 0 and 'admin.conf' in kubeadm_init.stdout
  failed_when: false

- name: Fetch join commands from control plane
  when: inventory_hostname == groups['k8s_masters'][0]
  become: true
  ansible.builtin.shell: |
    kubeadm token create --print-join-command
  register: join_cmd
  changed_when: false

- name: Export join command to all hosts
  when: inventory_hostname == groups['k8s_masters'][0]
  ansible.builtin.set_fact:
    cp_join_command: "{{ join_cmd.stdout | trim }}"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_masters'] + groups['k8s_workers'] }}"

- name: Wait for API to be reachable from others
  when: inventory_hostname != groups['k8s_masters'][0]
  ansible.builtin.wait_for:
    host: "{{ control_plane_endpoint.split(':')[0] }}"
    port: 6443
    delay: 5
    timeout: 300

- name: Join nodes to cluster (workers)
  become: true
  when:
    - inventory_hostname in groups['k8s_workers']
  ansible.builtin.shell: |
    set -e
    if [ ! -f /etc/kubernetes/kubelet.conf ]; then
      {{ hostvars[groups['k8s_masters'][0]].cp_join_command }} --node-name {{ inventory_hostname }} --ignore-preflight-errors=all
    fi
  args:
    executable: /bin/bash
  register: join_result
  changed_when: join_result.rc == 0
  failed_when: false
