---
# Ensure cloud-init image/template exists on Proxmox and create/update VMs using API

- name: Proxmox template and VM provisioning (SSH to PVE)
  when:
    - inventory_hostname in groups['proxmox_servers']
    - proxmox_manage_template | bool
  block:
    - name: Ensure Ubuntu cloud image downloaded on Proxmox
      ansible.builtin.get_url:
        url: "{{ cloud_image_url }}"
        dest: "/var/lib/vz/template/iso/{{ cloud_image_alias }}.img"
        mode: '0644'

    - name: Ensure base template VM exists (idempotent)
      ansible.builtin.shell: |
        set -euo pipefail
        if ! qm list | awk '{print $1}' | grep -qx {{ template_vm_id | quote }}; then
          qm create {{ template_vm_id | quote }} --name {{ template_name }} --memory {{ proxmox_vm_ram }} --cores {{ proxmox_vm_cores }} --net0 virtio,bridge={{ proxmox_vm_network_bridge }}{{ proxmox_vm_vlan_tag | ternary(',tag=' + (proxmox_vm_vlan_tag | string), '') }}
          qm importdisk {{ template_vm_id | quote }} /var/lib/vz/template/iso/{{ cloud_image_alias }}.img {{ proxmox_storage }}
          qm set {{ template_vm_id | quote }} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-{{ template_vm_id }}-disk-0
          qm set {{ template_vm_id | quote }} --ide2 {{ proxmox_storage }}:cloudinit
          qm set {{ template_vm_id | quote }} --boot c --bootdisk scsi0
          qm set {{ template_vm_id | quote }} --serial0 socket --vga serial0
          qm template {{ template_vm_id | quote }}
        fi
      args:
        executable: /bin/bash
      changed_when: false

- name: Provision VMs from inventory via Proxmox API
  when: inventory_hostname in groups['proxmox_servers']
  run_once: true
  include_tasks: create_vm.yml
  loop: "{{ groups['proxmox_vms'] }}"
  loop_control:
    loop_var: vmhost
  vars:
    api_user: "{{ proxmox_host_username }}"
    api_pass: "{{ proxmox_host_password }}"
    api_host: "{{ proxmox_api_host }}"
